// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIM_Lubricentro.Data;

namespace SIM_Lubricentro.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200130015743_Migracion6")]
    partial class Migracion6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Carro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Año");

                    b.Property<int>("Cliente_ID");

                    b.Property<string>("Estilo");

                    b.Property<string>("Kms");

                    b.Property<string>("Placa");

                    b.Property<string>("Vehiculo");

                    b.HasKey("ID");

                    b.HasIndex("Cliente_ID");

                    b.ToTable("Carro");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cedula");

                    b.Property<string>("Celular");

                    b.Property<string>("Correo");

                    b.Property<string>("Nombre");

                    b.Property<string>("Telofono");

                    b.HasKey("ID");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Historial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Carro_ID");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("Personal_ID");

                    b.HasKey("ID");

                    b.HasIndex("Carro_ID");

                    b.HasIndex("Personal_ID");

                    b.ToTable("Historial");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Personal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cedula");

                    b.Property<string>("Celular");

                    b.Property<string>("Correo");

                    b.Property<string>("Nombre");

                    b.Property<string>("PuestoDeTrabajo");

                    b.Property<string>("Telofono");

                    b.HasKey("ID");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.PiezaAgregada", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Carro_ID");

                    b.Property<string>("CodigoProducto");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaPiezaAgregada");

                    b.Property<int?>("HistorialID");

                    b.Property<int?>("RealizarReparacionID");

                    b.HasKey("ID");

                    b.HasIndex("Carro_ID");

                    b.HasIndex("HistorialID");

                    b.HasIndex("RealizarReparacionID");

                    b.ToTable("PiezaAgregada");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.RealizarReparacion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Carro_ID");

                    b.Property<int>("Personal_ID");

                    b.Property<bool>("Realizado");

                    b.HasKey("ID");

                    b.HasIndex("Carro_ID");

                    b.HasIndex("Personal_ID");

                    b.ToTable("RealizarReparacion");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Reparacion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescripcionReparacion");

                    b.Property<int?>("HistorialID");

                    b.Property<int?>("RealizarReparacionID");

                    b.Property<string>("Titulo");

                    b.HasKey("ID");

                    b.HasIndex("HistorialID");

                    b.HasIndex("RealizarReparacionID");

                    b.ToTable("Reparacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Carro", b =>
                {
                    b.HasOne("SIM_Lubricentro.Models.Cliente", "Cliente")
                        .WithMany("Carros")
                        .HasForeignKey("Cliente_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Historial", b =>
                {
                    b.HasOne("SIM_Lubricentro.Models.Carro", "Carro")
                        .WithMany("Historiales")
                        .HasForeignKey("Carro_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIM_Lubricentro.Models.Personal", "Personal")
                        .WithMany("Historiales")
                        .HasForeignKey("Personal_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.PiezaAgregada", b =>
                {
                    b.HasOne("SIM_Lubricentro.Models.Carro", "Carro")
                        .WithMany("PiezasAgregadas")
                        .HasForeignKey("Carro_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIM_Lubricentro.Models.Historial")
                        .WithMany("PiezasAgregadas")
                        .HasForeignKey("HistorialID");

                    b.HasOne("SIM_Lubricentro.Models.RealizarReparacion")
                        .WithMany("PiezasAgregadas")
                        .HasForeignKey("RealizarReparacionID");
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.RealizarReparacion", b =>
                {
                    b.HasOne("SIM_Lubricentro.Models.Carro", "Carro")
                        .WithMany("RealizarReparaciones")
                        .HasForeignKey("Carro_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIM_Lubricentro.Models.Personal", "Personal")
                        .WithMany("RealizarReparaciones")
                        .HasForeignKey("Personal_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIM_Lubricentro.Models.Reparacion", b =>
                {
                    b.HasOne("SIM_Lubricentro.Models.Historial")
                        .WithMany("Reparaciones")
                        .HasForeignKey("HistorialID");

                    b.HasOne("SIM_Lubricentro.Models.RealizarReparacion")
                        .WithMany("Reparaciones")
                        .HasForeignKey("RealizarReparacionID");
                });
#pragma warning restore 612, 618
        }
    }
}
